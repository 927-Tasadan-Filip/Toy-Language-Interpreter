Heap:
Execution stack:
(Ref int v, (new(v, 20), (Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v)))))))
Symbol table:
Out:
FileTable:

Heap:
Execution stack:
Ref int v
(new(v, 20), (Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))))
Symbol table:
Out:
FileTable:

Heap:
Execution stack:
Ref int v
(new(v, 20), (Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))))
Symbol table:
Out:
FileTable:

Heap:
Execution stack:
(new(v, 20), (Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))))
Symbol table:
v->(0, int)
Out:
FileTable:

Heap:
Execution stack:
(new(v, 20), (Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))))
Symbol table:
v->(0, int)
Out:
FileTable:

Heap:
Execution stack:
new(v, 20)
(Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v)))))
Symbol table:
v->(0, int)
Out:
FileTable:

Heap:
Execution stack:
new(v, 20)
(Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v)))))
Symbol table:
v->(0, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
(Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v)))))
Symbol table:
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
(Ref Ref int a, (new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v)))))
Symbol table:
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
Ref Ref int a
(new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))
Symbol table:
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
Ref Ref int a
(new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))
Symbol table:
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
(new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))
Symbol table:
a->(0, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
(new(a, v), (new(v, 30), (print(rH(rH(a))), new(a, v))))
Symbol table:
a->(0, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
new(a, v)
(new(v, 30), (print(rH(rH(a))), new(a, v)))
Symbol table:
a->(0, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
Execution stack:
new(a, v)
(new(v, 30), (print(rH(rH(a))), new(a, v)))
Symbol table:
a->(0, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
Execution stack:
(new(v, 30), (print(rH(rH(a))), new(a, v)))
Symbol table:
a->(2, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
Execution stack:
(new(v, 30), (print(rH(rH(a))), new(a, v)))
Symbol table:
a->(2, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
Execution stack:
new(v, 30)
(print(rH(rH(a))), new(a, v))
Symbol table:
a->(2, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
Execution stack:
new(v, 30)
(print(rH(rH(a))), new(a, v))
Symbol table:
a->(2, Ref int)
v->(1, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
3->30
Execution stack:
(print(rH(rH(a))), new(a, v))
Symbol table:
a->(2, Ref int)
v->(3, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
3->30
Execution stack:
(print(rH(rH(a))), new(a, v))
Symbol table:
a->(2, Ref int)
v->(3, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
3->30
Execution stack:
print(rH(rH(a)))
new(a, v)
Symbol table:
a->(2, Ref int)
v->(3, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
3->30
Execution stack:
print(rH(rH(a)))
new(a, v)
Symbol table:
a->(2, Ref int)
v->(3, int)
Out:
FileTable:

Heap:
1->20
2->(1, int)
3->30
Execution stack:
new(a, v)
Symbol table:
a->(2, Ref int)
v->(3, int)
Out:
20
FileTable:

Heap:
1->20
2->(1, int)
3->30
Execution stack:
new(a, v)
Symbol table:
a->(2, Ref int)
v->(3, int)
Out:
20
FileTable:

Heap:
1->20
2->(1, int)
3->30
4->(3, int)
Execution stack:
Symbol table:
a->(4, Ref int)
v->(3, int)
Out:
20
FileTable:

Heap:
3->30
4->(3, int)
Execution stack:
Symbol table:
a->(4, Ref int)
v->(3, int)
Out:
20
FileTable:

